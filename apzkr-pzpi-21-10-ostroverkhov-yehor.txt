Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Факультет комп’ютерних наук


Кафедра програмної інженерії


КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для автоматизованого управління освітленням для вирощування рослин  


Студент групи ПЗПІ-21-10        _______________        Островерхов Є. А.
                                        (підпис)
Керівник роботи                        _______________ доц. Лещинська І. О.
                                        (підпис)
                                            Роботу захищено «__» ____________ 2024 р.
                                            з оцінкою _____________________________


Комісія:                                _______________ доц., к. т. н. Лещинська І. О.
                                                (підпис)
                                        _______________ доц., к. т. н. Лещинський В. О.
                                                (підпис)
                                        _______________ ст. викл. Сокорчук І. П.
                                                (підпис)




Харків 
2024 р.
Харківський національний університет радіоелектроніки  


Факультет комп’ютерних наук       Кафедра програмної інженерії                 Спеціальність 121 – Інженерія програмного забезпечення                        Курс                 3         Семестр                                 6                                 Навчальна дисципліна Архітектура програмного забезпечення                 


ЗАВДАННЯ 
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ
  
                             Островерхову Єгору Андрійовичу                                        
1. Тема проєкту:  «Програмна система для автоматизованого управління         освітленням для вирощування рослин»                                                        
2. Термін узгодження завдання курсової роботи «25» березня 2024 р. 
3. Термін здачі студентом закінченої роботи «30» травня 2024 р.  
4. Вихідні дані до проєкту (роботи): Система, в якій буде керування освітленням в місцях вирощування рослин, що забезпечить ефективне зростання рослин за допомогою слідкування за біологічними потребами рослин і зміною освітлення завдяки інформації про ці потреби, ця система буде використовувати СУБД PostgreSQL, Java, Spring                                   
5. Зміст пояснювальної записки (перелік питань, що належить  розробити) вступ, аналіз предметної області, постановка задачі, проєктування програмного проєкту, структура бази даних, кодування програмного проєкту, опис розробленої програмної системи, висновки, перелік посилань, додатки        
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси) UML діаграма розгортання, UML діаграма взаємодії, UML діаграма станів, UML діаграма прецедентів, UML діаграма діяльності, UML діаграма компонент, а також ER модель даних.                                                                                                                                                                                                                                                                                        
КАЛЕНДАРНИЙ ПЛАН


№ 
	Основні етапи виконання проєкту в рамках курсової роботи
	Термін виконання етапів
	Примітка
	1
	Функціональна специфікація програмного проєкту
	30.03.2024
	виконано
	2
	Проєктування програмного проєкту
	11.04.2024
	виконано
	3
	Кодування програмного проєкту
	25.04.2024
	виконано
	4
	Оформлення пояснювальної записки
	23.05.2024
	виконано
	5
	Захист курсової роботи
	30.05.2024
	виконано
	

Дата видачі теми проєкту «25» березня 2024 р.  


Керівник роботи                        __________ доц. Лещинська І. О.
                                                    (підпис)  


Завдання прийняв до виконання 
ст. гр. ПЗПІ-21-10                 __________ Островерхов Є. А.
                                            (підпис)
________________


РЕФЕРАТ




Пояснювальна записка до курсової роботи: 27 сторінок, 24 рисунків, 6 джерел, 4 додатки.
АВТОМАТИЗАЦІЯ ОСВІТЛЕННЯ, ВІДДАЛЕНИЙ КОНТРОЛЬ, МОНІТОРИНГ, ПЛАНТАЦІЇ, ПРОГРАМНА СИСТЕМА ФЕРМА, JAVA, JAVASCRIPT, POSTGRESQL, REACT.
Об’єктом дослідження є індустрія сільського господарства та вирощування рослин, питання ефективного використання автоматичних систем управління освітленням на плантаціях та фермах. Традиційні методи вирощування рослин за допомогою штучного освітлення можуть бути неефективними, оскільки вони не враховують біологічних потреб рослин та можуть призводити до нестабільного росту та низького врожаю. Тому потрібне рішення, яке автоматично регулює освітлення на основі різних факторів, включаючи фази росту рослин та вологість. 
Метою роботи є розробка програмної системи, яка забезпечує ефективне управління освітленням на плантаціях та фермах. Система буде зберігати інформацію про вимоги до освітлення рослин, фази їх росту, оптимальні параметри освітлення та автоматично регулювати освітлення для забезпечення оптимальних умов для росту рослин. 
Методи розробки базуються на використанні технології Java 17 для реалізації серверної частини програмної системи, СУБД PostgreSQL[1] для зберігання інформації про рослини та параметри освітлення, веб-застосунок базується на технології React для зручного користування системою, мобільний додаток розроблений за допомогою технології Kotlin для доступу до системи з мобільних пристроїв, смарт-пристрій розроблений у вигляді емулятору використовуючи мову програмування Java з різноманітними датчиками, які можна динамічно додавати до системи для вимірювання параметрів рослин та визначення необхідних умов освітлення.
У результаті роботи буде створено програмну систему для автоматичного управління освітленням на плантаціях та фермах. Програмна система складатиметься з веб-застосунку для управління та моніторингу рослин, сервера для зберігання даних, мобільного додатку для доступу до системи з мобільних пристроїв та смарт-пристрою для вимірювання параметрів рослин.
________________
ЗМІСТ




Вступ        7
1.        Бізнес вимоги        8
1.1.        Передумови        8
1.2.        Бізнес-можливості        8
1.3.        Бізнес-цілі та критерії успіху        9
1.4.        Потреби клієнтів або ринку        9
1.5.        Бізнес-ризики        10
2.        Концепція рішення        12
2.1.        Окреслення концепції        12
2.2.        Головна функціональність        13
2.3.        Припущення та залежності        15
3.        Формування вимог до програмної системи        16
3.1.        Огляд частин програмної системи        16
3.2.        Серверна частина програмної системи        16
3.3.        Клієнтська частина програмної системи        17
3.4. IoT частина програмної системи        18
4.        Проєктування бази даних        19
4.1.        Побудова ER-діаграми        19
5. Опис програми        23
5.1.        Загальні відомості        23
5.2.        Виклик і завантаження        24
5.3. Призначення й логічна структура        24
5.4. Опис програмної реалізації        25
5.5. Архітектура серверної частини        30
5.6. Опис IoT частини        33
Висновки        34
Перелік джерел посилань        35        
Додаток А        36        
Додаток Б        37
Додаток В        38
Додаток Г        41
Додаток Д        43
________________
ВСТУП




Метою цієї курсової роботи є розробка програмної системи, що забезпечує автоматичне та ефективне управління освітленням на плантаціях та фермах. З метою виконання цієї задачі були розроблені такі функції:        
– Перегляд інформації про всі рослини, ламп та сенсорів у програмній системі;
– Можливість додавати нові рослини, лампи та сенсори до програмної системи;
– Регулювання інтенсивності світла;
– Автоматичне регулювання освітлення на основі зчитувань сенсорів;
– Резервне копіювання даних про користувачів, а також відновлення цих даних;
– Перегляд усіх зчитувань та попереджень з сенсорів з приводу умов вирощування рослин;
        Для розробки програмної системи були використані такі технології: Java, PostgreSQL, React, JavaScript.
        Система використовується для покращеного вирощування рослин завдяки автоматизації процесів освітлення, а також завдяки інформації з сенсорів про стан рослин.
________________
1 БІЗНЕС-ВИМОГИ




   1. Передумови




У сучасному світі спостерігається підвищений інтерес до використання автоматизованих систем управління освітленням для вирощування рослин. Традиційні методи вирощування рослин за допомогою штучного освітлення можуть бути неефективними, оскільки вони не враховують біологічні потреби рослин і можуть призводити до нестабільного росту та низького врожаю. Отже, потрібне рішення, яке автоматично регулює освітлення на основі різних факторів, включаючи фази росту рослин та вологість, програмна система, що спрямована на покращення якості вирощування рослин, збільшення врожаю а також покращенню енергоефективності.




   2. Бізнес-можливості




Ринкові можливості в даному сегменті на сьогоднішній день є перспективними, оскільки вирощування рослин стає все більш популярним як серед любителів, так і серед професіоналів. Сучасні системи вирощування рослин за допомогою штучного освітлення часто є неефективними і не забезпечують оптимальних умов для росту рослин. Основними конкурентами можуть бути компанії, що пропонують системи автоматизованого вирощування рослин, такі як Growlink, Heliospectra, Autogrow. Здатність системи підвищувати якість вирощування рослин та знижувати витрати на електроенергію позиціонує її як конкурентоспроможне рішення на ринку.


   3. Бізнес-цілі та критерії успіху




Основними бізнес-цілями створення нової системи є:
– BO-1: Зменшення витрат на електроенергію на об'єктах вирощування рослин на 25% протягом першого року використання системи;
– BO-2: Збільшення врожайності рослин на 15% за рахунок оптимізації параметрів освітлення та створення оптимального середовища для росту;
– BO-3: Зниження витрат на ручний контроль та налаштування освітлення на 30% за рахунок автоматизації процесів управління;
– BO-4: Отримати позитивний прибуток від інвестицій (ROI) протягом трьох років після запуску продукту;
– BO-5: Підвищення конкурентоспроможності продукції за рахунок покращення якості та стабільності умов вирощування рослин;
Успіх буде визначатися та вимірюватися через:
– SC-1: Збільшення врожайності рослин на об'єктах вирощування на не менше 10% за рахунок оптимізації параметрів освітлення та створення оптимальних умов для росту;
– SC-2: Зменшення кількості витраченого часу на контроль та налаштування освітлення на об'єктах вирощування на не менше 20% через автоматизацію процесів управління;
– SC-3: Досягнення цільової частки ринку в обумовлені терміни;
– SC-4: Залучення не менше 20% нових клієнтів за рахунок впровадження передових технологій у сфері вирощування рослин;




   4. Потреби клієнтів або ринку




Потребами клієнтів або ринку є:
– Адаптивне освітлення: клієнти потребують системи, яка може динамічно регулювати параметри освітлення в залежності від потреб різних видів рослин та їх фаз росту;
– Енергоефективність. фермери та виробники шукають ефективні способи використання енергії для зменшення витрат та підвищення ефективності вирощування рослин;
– Простота в управлінні: користувачі очікують легкого та зручного інтерфейсу для налаштування та контролю параметрів освітлення, щоб забезпечити оптимальні умови для росту рослин;
– Інтеграція з іншими системами: система повинна інтегруватися з іншими апаратними та програмними рішеннями, що використовуються в сільському господарстві та вирощуванні рослин;
– Аналітика та звітність: фермери та виробники зацікавлені в зборі та аналізі даних про вирощування рослин, щоб оптимізувати процес та підвищити врожайність;
– Доступність та надійність: важливо, щоб система була доступною для різних типів користувачів та надійною у роботі, особливо в умовах вирощування рослин, де стабільність середовища грає важливу роль;




   5. Бізнес-ризики




Основні бізнес-ризики, пов'язані з розвитком програмної системи для автоматизованого управління освітленням для вирощування рослин, можуть включати:
– Технічні проблеми: нестабільність системи, помилки в програмному забезпеченні або непередбачені проблеми з апаратним забезпеченням можуть призвести до недостатньої або неправильної роботи системи, що може негативно вплинути на вирощування рослин;
– Неприйняття ринку: якщо фермери або виробники рослин не бачать значної переваги у використанні автоматизованої системи управління освітленням, вони можуть бути не готові вкладати гроші та час в цю систему;
– Конкуренція: Поява конкурентів з аналогічними або кращими рішеннями для управління освітленням для вирощування рослин може ускладнити входження на ринок та просування продукту;
– Вимоги до стандартів та регуляторної відповідності: Недотримання галузевих стандартів та вимог щодо якості та безпеки може призвести до юридичних проблем та втрати репутації;
– Технологічні зміни: Швидкі зміни в технологіях вирощування рослин та управління можуть призвести до швидкого застаріння програмної системи, якщо вона не може швидко адаптуватися до нових вимог
Для зменшення цих ризиків можуть бути вжиті заходи, такі як технічні спеціалісти для виявлення та виправлення можливих проблем, проведення маркетингових досліджень для визначення потреб ринку та конкурентного середовища, а також постійне оновлення системи для відповідності новим технологічним вимогам.
________________


2 КОНЦЕПЦІЯ РІШЕННЯ




2.1 Окреслення концепції




Програмна система для автоматизованого управління освітленням для вирощування рослин представляє собою систему, призначену для створення середовища для росту рослин у теплицях. Розроблена з використанням передових технологій управління освітленням та аналізу даних, система максимізує продуктивність вирощування рослин та забезпечує стабільний і високоякісний врожай.
Ця система з’явилася з урахуванням потреб, з якими зіштовхуються сільськогосподарські виробники у сучасному світі. Вона оптимізує процес вирощування рослин, забезпечуючи оптимальні умови для їх росту. Програмна система використовує датчики та алгоритми для контролю за параметрами освітлення, такими як інтенсивність, тривалість та спектральний склад світла, створюючи необхідне освітлення для кожного виду рослин.
Шляхом аналізу відомостей про потреби кожного виду рослин у світлі, система автоматично регулює інтенсивність, тривалість та спектр світла, забезпечуючи оптимальні умови для їхнього росту.
Застосовуючи сучасні технології автоматизації, система зменшує необхідність в ручній роботі, проте система все одно може контролюватися людиною.
Система забезпечує постійний моніторинг параметрів росту рослин та аналіз даних, що дозволяє вчасно виявляти потенційні проблеми та оптимізувати процес вирощування.




2.2 Головна фунціональність




Програмна система матиме наступні функції:
Для адміністратора:
– MF-1: Реєстрація користувача;
– MF-2: Вхід у систему;
– MF-3: Отримання списку користувачів;
– MF-4: Отримання інформації про конкретного користувача;
– MF-5: Видалення користувача;
– MF-6: Отримання ролей користувача;
– MF-7: Додавання ролі користувачу;
– MF-8: Видалення ролі користувача;
– MF-9: Збереження користувачів у CSV файл;
– MF-10: Завантаження користувачів з CSV файлу;
Для техніка:
– MF-11: Отримання списку рослин;
– MF-12: Додавання нового датчику;
– MF-13: Видалення датчика;
– MF-14: Отримання усіх датчиків за ідентифікаційним номером рослини;
– MF-15: Додавання нового зчитування;
– MF-16: Додавання нової рослини;
– MF-17: Оновлення інформації про рослину;
– MF-18: Видалення рослини;
– MF-19: Отримання списку ламп;
– MF-20: Додавання нової лампи;
– MF-21: Видалення лампи;
– MF-22: Зміна яскравості освітлення лампи;
– MF-23: Отримання усіх ламп за ідентифікаціним номером датчика;
        Для користувача:
– MF-24: Отримання зчитувань за ідентифікаційним номером датчика;
– MF-25: Отримання попереджень за ідентифікаційним номером рослини;
– MF-26: Отримання списку датчиків;
Переглянути взаємодію користувачів з цими функціями можна побачити на наступній діаграмі прецедентів(див. рис. 1.1).


  

Рисунок 1.1 – UML діаграма прецедентів (Use Case Diagram) програмної системи


На цій діаграмі можна побачити користувачів, які діляться на 3 ролі:
– Звичайний користувач – це користувач, що можна зареєструватися, а після реєстрації входити в систему і переглядати списки сенсорів та зчитувань;
– Адміністратор – це користувач, що може взаємодіяти з інформацією про користувачів, змінювати ролі користувачів, а також видаляти їх, якщо є така необхідність;
– Технік – це користувач, що може взаємодіяти з рослинами, лампами, сенсорами і таким чином, а саме, переглядати всі ці об’єкти, змінювати та видаляти;
2.3 Припущення та залежності




Припущення:
– AS-1: Наявність надійних та точних сенсорів для вимірювання рівня світла, температури та вологості вирощуваних рослин;
– AS-2: Існування відкритих протоколів для забезпечення сумісності з різноманітними сенсорами та пристроями автоматизації;
– AS-3: Наявність технічної підтримки та сервісу для розгортання та підтримки системи;
– AS-4: Готовність користувачів (фермерів, виробників) адаптуватися до використання нових технологій у вирощуванні рослин;
Залежності:
– DE-1: Інтеграція з сенсорами для збору даних про рослини та керування освітленням;
– DE-2: Доступ до даних про вимоги рослин до світла та спектральних властивостей для ефективного росту;
– DE-3: Можливість інтеграції з іншими системами вирощування рослин (до прикладу, системами поливу);
– DE-4: Доступ до даних про енергоспоживання та енергоефективність для визначення оптимальних режимів освітлення;
________________


3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ




3.1 Огляд частин програмної системи


 
        Програмна система буде містити в собі три частини:
        – серверна частина;
        – клієнтська частина, або веб частина;
        – IoT;




        3.2 Серверна частина програмної системи




        Серверна частина програмної системи реалізована на мові програмування Java з використанням фреймворку Spring Boot[2] та ORM-бібліотеки Hibernate[3]. Для розробки та налагодження коду використовується інтегроване середовище розробки IntelliJ IDEA від компанії JetBrains. 
Проєкт зібраний за допомогою системи управління залежностями та автоматизації зборки Maven, що дозволяє легко керувати залежностями та процесом збірки. 
Використання Spring Boot дозволяє швидко та ефективно створювати та налаштовувати веб-додатки, надаючи широкий спектр інструментів та можливостей для побудови масштабованих та надійних серверних рішень. Hibernate, у свою чергу, забезпечує зручну та продуктивну роботу з базами даних, автоматизуючи більшість рутинних завдань, пов'язаних з збереженням даних. Таким чином, обрана технологічна платформа та архітектурний підхід сприяють розробці гнучкої, легко масштабованої та підтримуваної серверної частини програмної системи.




3.3 Клієнтська частина програмної системи




Було вирішено розробити веб-сайт використовуючи веб-фреймворк React JS у поєднанні з HTML та CSS. Сайт надасть можливість користувачам дивитися на попередження з приводу стану зростання рослин, а також дивитися поточні налаштування освітлення та змінювати їх. Також, технікам буде надана можливість додавати нові сенсори, які можна призначати рослинам для виміру показників зростання рослин, а також змінювати налаштування сенсорів та видаляти їх. Адміністративна панель дозволить адміністратору керувати користувачами та їх ролями і видаляти користувачів з системи. Розглянемо інтерфейс головної сторінки (див. рис. 3.1), на цій сторінці можна побачити попередження показників здоров’я рослини, а також інтерфейс адміністративної панелі, на якій можна побачити можливість управління користувачами (див. рис. 3.2).


  

Рисунок 3.1 – Головна сторінка сайту PlantLightcycle


  

Рисунок 3.2 – Адміністративна панель сайту PlantLightcycle




3.4 IoT частина програмної системи




Для розробки IoT було прийнято рішення використовувати мову програмування Java для написання заміни системи IoT, але не дивлячись на те, що система буде заміною системи IoT, вона буде виконувати свої функції як необхідно і створювати випадкові значення, що будуть оброблятися та відправлятися на сервер, тобто система буде мати наближений до справжнього IoT пристрою функціонал. Для взаємодії між IoT сервісом та серверною частиною буде використано HTTP в поєднані з REST. Сам IoT сервіс буде написано на мові програмування Java з використанням фреймворку Spring Boot.
________________
4 ПРОЄКТУВАННЯ БАЗИ ДАНИХ




        4.1 Побудова ER-діаграми




        Серверна частина програмної системи буде використовувати систему управління базами даних PostgreSQL. PostgreSQL, як потужна та надійна реляційна база даних, забезпечує збереження та обробку даних з високим рівнем продуктивності та безпеки. 
Використання PostgreSQL у поєднанні з фреймворком Hibernate дозволяє ефективно управляти збереженням даних, автоматизуючи більшість рутинних завдань, пов'язаних з роботою з базою даних. Це забезпечує високу продуктивність, надійність та масштабованість системи, що є критично важливим для її успішного функціонування.
У базі даних можуть бути встановлені реляційні зв'язки між таблицями, що дозволяє ефективно організувати взаємозалежні дані. 
У предметній області є такі сутності, згідно аналізу:
– Рослини (Plants): містить інформацію про рослини, включаючи їх назву, мінімальний та максимальний рівні освітлення, а також відсоток зростання;
– Сенсори (Sensors): зберігає дані про сенсори, що встановлені для рослин, включаючи їх назву та ідентифікатор рослини, до якої вони належать;
– Лампи (Lamps): містить інформацію про лампи, включаючи їх назву, спектр освітлення та рівень освітленості, а також ідентифікатор датчика, до якого кожна лампа прив'язана;
– Зчитування (Readings): містить інформацію про показання з сенсорів, включаючи значення, дату та час зчитування, а також ознаку попередження;
– Користувачі (Users): містить інформацію про окремого користувача системи, включаючи його логін, пароль та дату створення облікового запису. Користувач може мати різні ролі, такі як адміністратор або звичайний користувач;
– Ролі (Roles): зберігає дані про ролі користувачів у системі. Це будуть ролі адміністратора, користувача, а також техніка;
– Ролі користувачів (UserRoles): містить інформацію про зв'язок між користувачами та їх ролями;
Виділимо атрибути кожної з сутностей:
– Plants:
1. #id – унікальний ідентифікатор рослини;
2. name – назва рослини;
3. min_light_level – мінімальний рівень освітлення для рослини;
4. max_light_level – максимальний рівень освітлення для рослини;
5. growth_percentage – поточний відсоток зростання рослини;
        – Сенсори:
1. #id – унікальний ідентифікатор сенсора;
2. plant_id – ідентифікатор рослини, з якою пов'язаний сенсор;
3. name – назва сенсора;
        – Лампи:
1. #id – унікальний ідентифікатор лампи;
2. sensor_id – ідентифікатор датчика, пов'язаного з лампою;
3. name – назва лампи;
4. spectrum – спектр світла, який випромінює лампа;
5. light_level – рівень освітлення, який випромінюється лампою;
        – Зчитування: 
1. #id – унікальний ідентифікатор вимірювання;
2. sensor_id – ідентифікатор датчика, до якого належить вимірювання;
3. name – назва вимірювання;
4. value – значення вимірювання;
5. date_time – дата та час проведення вимірювання;
6. is_warning – вказує, що вимірювання є попередженням;
        – Користувачі: 
1. #id – унікальний ідентифікатор користувача;
2. login – логін користувача;
3. password – пароль користувача;
4. created_at – дата та час створення облікового запису користувача;
        – Ролі:
1. #id – унікальний ідентифікатор ролі;
2. name – назва ролі;
        – Ролі користувачів: 
1. #id – унікальний ідентифікатор ролі користувача;
2. role_id – ідентифікатор ролі, призначеної користувачеві;
У базі даних наявні наступні зв'язки між сутностями: 
– Користувач та ролі (UserRoles) мають зв'язок багато до багатьох, бо декілька користувачів можуть мати однакові ролі, а також декілька ролей можуть мати однакових користувачів;
– Сенсори (Sensors) та рослини (Plants) мають зв'язок один до багатьох, оскільки одна рослина може мати декілька сенсорів, але кожен сенсор пов'язаний лише з однією рослиною;
– Зчитування (Readings) та сенсори (Sensors) мають зв'язок один до багатьох, оскільки один сенсор може мати багато зчитувань, але кожне звчитування пов'язане лише з одним сенсором;
– Лампи (Lamps) та сенсори (Sensors) мають зв'язок один до багатьох, бо кожен сенсор може мати багато ламп, але кожна лампа пов’язана лише з одним сенсором;
На основі цього було побудовано ER-діаграму (див. рис. 4.1).






  

Рисунок 4.1 – ER-модель даних (діаграми) (Entity-Relationship Model) програмної системи
________________


5 ОПИС ПРОГРАМИ




        5.1 Загальні відомості




        Для створення програмної системи для автоматизованого управління         освітленням для вирощування рослин була використана програма IntelliJ IDEA 2024.1.
Для написання серверної частини на Java, активно використовувався фреймворк Spring, а саме Spring Boot, Spring Data Jpa[3], разом з ним були використані такі бібліотеки як Hibernate, OpenCsv, Lombok, Spring Doc, JsonWebToken, PostgreSQL Driver. 
Для розробки клієнтської (frontend) частини програмної системи був використаний фреймворк React 17, що є фрейморком для JavaScript, а також, для дизайну був використаний Bootstrap 5. 
Для розробки IoT емулятору було використано мову програмування Java разом з використанням бібліотек Spring, Spring Boot, Lombok. 
Для створення бази даних було використано pgAdmin4, що взаємодіє з PostgreSQL. СУБД PostgreSQL допомогає швидко взаємодіяти з базою даних не витрачаючи багато часу на підключення та налаштування самої бази даних.
Також, для розуміння того як все повинно взаємодіяти між собою було побудовано UML діаграму розгортання (див. додаток А), UML діаграму компонентів (див. додаток Б), UML діаграму взаємодії (див. додаток В), а також UML діаграму діяльності (див. додаток Г).












        5.2 Виклик і завантаження




        Для початку користування програмної системи необхідно завантажити всі три частини програми, переконатися, що працює база даних PostgreSQL, запустити серверну частину, після чого запустити частину IoT, а після цього запустити клієнтську частину. Після цих кроків можна зайти в будь-який браузер та ввести localhost:3000 і користувач потрапить на головну сторінку програмної системи, якою вже можна користуватися.




        5.3 Призначення й логічна структура




        Програмна система для автоматизованого управління освітленням для вирощування рослин призначена для оптимізації процесу вирощування рослин шляхом контролю та управління рівнем освітлення. 
Основні цілі системи включають: 
– Підвищення ефективності вирощування рослин: Забезпечення рослин оптимальним рівнем освітлення, що сприяє їхньому здоровому зростанню та підвищує врожайність;
– Зниження енергоспоживання: Оптимізація використання освітлення для зменшення витрат на електроенергію;
– Автоматизація процесів: Зменшення потреби в ручному управлінні освітленням та підвищення точності і регулярності освітлення;
– Моніторинг та аналіз даних: Збір та аналіз даних про освітлення та стан рослин для прийняття обґрунтованих рішень щодо покращення умов вирощування;




5.4 Опис програмної реалізації


Після запуску програми, користувач побачить вікно привітання на якому можна побачити кнопку Login для входу в систему (див. рис. 5.1).


  

Рисунок 5.1 – Вікно привітання перед входом у програму


        Після натискання на кнопку Login користувачу надається можливість увійти у систему (див. рис. 5.2), або ж зареєструвати нового користувача (див. рис. 5.3)


  

Рисунок 5.2 – Панель авторизації


  

Рисунок 5.3 – Панель реєстрації


        Після входу системи, користувач маючи роль адміністратора може переглянути список всіх користувачів (див. рис. 5.4), а також на цій сторінці адміністратор може видаляти користувачів, переглядати інформацію про користувача натиснувши на кнопку “Show Details”, що переведе адміністратора на сторінку перегляду даних про користувача (див. рис. 5.5), а ще адміністратор може змінювати ролі користувача натиснувши на кнопку “Edit Roles”, що переведе на сторінку зміни ролей для конкретного користувача (див. рис. 5.6).


  

Рисунок 5.4 – Адмін панель


  

Рисунок 5.5 – Інформація про користувача


  

Рисунок 5.6 – Сторінка зміни ролей для конкретного користувача


        Якщо користувач має роль техніка, він зможе переглядати список рослин (див. рис. 5.7), а також додавати нові рослини, змінювати їх відсоток зросту та видаляти. Також, він зможе переглядати список сенсорів (див. рис. 5.8) по ідентифікаційному номеру рослини, додавати нові сенсори та видаляти старі. Також, він зможе переглядати список всіх ламп (див. рис. 5.9), переглядати список ламп, що відносяться до певного сенсору по ідентифікаційному номеру, додавати нові лампи, оновлювати вже існуючі лампи, а також видаляти лампи.


  

Рисунок 5.7 – Сторінка рослин


  

Рисунок 5.8 – Сторінка сенсорів


  

Рисунок 5.9 – Сторінка ламп


        Якщо користувач не має ні ролі техніка ні ролі адміна, то в нього є можливість лише переглядати зчитування (див. рис. 4.10), а також фільтрувати ці зчитування по попередженням.


  

Рисунок 5.10 – Сторінка зчитувань




        5.5 Архітектура серверної частини




        Для забезпечення структурованості коду та полегшення підтримки та розвитку системи застосовано підхід MVCS (Model-View-Controller-Service), що можна побачити в коді (див. рис. 5.11). Цей підхід допомагає розділити логіку програмної системи на окремі частини: моделі, подання, контролери та сервіси:
– Model (Модель): представляє собою бізнес-логіку та стан додатку, що зберігається в базі даних. За допомогою Hibernate моделі відображаються на таблиці в реляційній базі даних, забезпечуючи просте та ефективне управління даними;
– View (Подання): відповідає за відображення даних користувачам. У контексті REST API було використано JSON як відповідь на запити;
– Controller (Контролер): обробляє HTTP-запити, спрямовані на конкретні URL, та визначає, які дії виконувати, зокрема взаємодію з моделями та виклик відповідних сервісів;
– Service (Сервіс): містить бізнес-логіку додатку, що обробляє дані та виконує операції, необхідні для виконання запитів. Сервіси забезпечують абстрагування бізнес-логіки від контролерів, що робить код більш чистим та легким у підтримці. 


  

Рисунок 5.11 – Розбиття на окремі директорії різних шарів програми


Серверна частина програмної системи відповідає за такі елементи:
– Реєстрація;
– Авторизація;
– Хешування паролів (див. рис. 5.12); 
– Отримання списку користувачів;
– Отримання детальної інформації про користувача;
– Видалення користувача;
– Отримання списку ролей користувача;
– Додавання ролі користувачу;
– Видалення ролі зі списку ролей користувача;
– Резервне копіювання списку користувачів у csv файл;
– Відновлення списку користувачів з csv файлу;
– Отримання списку сенсорів;
– Додавання сенсору;
– Видалення сенсору;
– Отримання сенсору по ідентифікаційному номеру рослини;
– Додавання зчитування;
– Отримування зчитування за ідентифікаційним номером сенсору;
– Отримування усіх попереджень за ідентифікаційним номером рослини;
– Отримання списку всіх рослин;
– Додавання рослини;
– Зміна відсотку зросту рослини;
– Видалення рослини;
– Отримання списку всіх ламп;
– Додавання лампи;
– Видалення лампи;
– Зміна освітлення лампи;
– Отримання всіх ламп за ідентифікаційним номером сенсору;
Всі інші частини програмної системи взаємодіють з серверною частиною за допомогою REST API.


  

Рисунок 5.12 – Хешування паролей






5.6 Опис IoT частини




IoT частина програмної системи була реалізована таким чином, що це сервіс, що генерує випадкові значення і взаємодіючи з серверною частиною отримує дані про нові сенсори, а також створює нові зчитування на основі цих сенсорів та рослин, після чого ці зчитування відправляють на сервер і зберігаються.
Окрім цього, якщо зчитування є попередженнями, тобто потребують певної уваги, відправляється запит на сервер на зміну значень освітлення ламп і таким чином рослина буде знаходитися в кращих умовах для зростання.
Після запуску програми ми бачимо, що відтворюється нескінченний цикл по генерації та відправці нових значень на сервер (див. рис. 5.13).


  

Рисунок 5.13 – Результат виконання IoT емулятору протягом 2 хвилин
________________
ВИСНОВКИ




        У процесі виконання курсової роботи було спроєктовано та розроблено програмну систему для автоматизованого управління        освітленням на фермах та плантаціях. Ця система включає в себе взаємодію з користувачами, рослинами, сенсорами, лампами, зчитуваннями сенсорів.
Для написання серверної частини на Java, активно використовувався фреймворк Spring, а саме Spring Boot, Spring Data Jpa, разом з ним були використані такі бібліотеки як Hibernate, OpenCsv, Lombok, Spring Doc, JsonWebToken, PostgreSQL Driver. 
Для розробки клієнтської (frontend) частини програмної системи був використаний фреймворк React 17, що є фрейморком для JavaScript, а також, для дизайну був використаний Bootstrap 5. 
Для розробки IoT емулятору було використано мову програмування Java разом з використанням бібліотек Spring, Spring Boot, Lombok. 
Для створення бази даних було використано pgAdmin4, що взаємодіє з PostgreSQL.
Також, протягом виконання курсової роботи були створені такі графічні матеріали: UML діаграма розгортання, UML діаграма взаємодії, UML діаграма станів, UML діаграма прецедентів, UML діаграма діяльності, UML діаграма компонент, а також ER модель даних.
Результати виконання курсової роботи можна побачити на GitHub[5] та Youtube[6].
________________


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ




        1. Туторіал по PostgreSQL URL: https://www.w3schools.blog/postgresql-
tutorial
        2. Документація по Spring Boot URL: https://docs.spring.io/spring-
boot/docs/current/reference/htmlsingle/
3. Гевін Кінг, Java Persistence with Hibernate, 2006. – 354 с.
4. Документація по Spring Data URL: https://spring.io/projects/spring-data
5. Посилання на код програмної системи URL: https://github.com/NureO
stroverkhovYehor/apzkr-pzpi-21-10-ostroverkhov-yehor
        6. Посилання на функціональне тестування програмної системи URL: https://www.youtube.com/watch?v=6NfkG7QDAt4
________________
ДОДАТОК А
UML діаграма розгортання (Deployment Diagram) програмної системи




  

Рисунок А.1 – UML діаграма розгортання (Deployment Diagram) програмної системи
________________


ДОДАТОК Б
UML діаграма компонент (Component Diagram) програмної системи




  

Рисунок Б.1 – UML діаграма компонентів (Component Diagram) програмної системи
________________
ДОДАТОК В
UML діаграма взаємодії (Interaction Overview Diagram) програмної системи




  

Рисунок В.1 – UML діаграма взаємодії (Interaction Overview Diagram) програмної системи (перша частина)


  

Рисунок В.2 – UML діаграма взаємодії (Interaction Overview Diagram) програмної системи (друга частина)


  

Рисунок В.3 – UML діаграма взаємодії (Interaction Overview Diagram) програмної системи (третя частина)
________________


ДОДАТОК Г
UML діаграма діяльності (Activity Diagram) програмної системи




  

Рисунок Г.1 – UML діаграма діяльності (Activity Diagram) програмної системи (перша частина)


  

Рисунок Г.2 – UML діаграма діяльності (Activity Diagram) програмної системи (друга частина)
________________


ДОДАТОК Д
Результат перевірки на антиплагіат


  

Рисунок Д.1 – Результат перевірки на антиплагіат